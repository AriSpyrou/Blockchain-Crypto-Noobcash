from flask import Flask, request
import json
import requests
from time import time, sleep
import rsa
from nbc_lib import Block, Transaction
import socket
from threading import Timer

app = Flask(__name__)
# Finding our local IP address by pinging the 0th node/gateway on port 80
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(("192.168.0.1", 80))
my_ip = s.getsockname()[0]
my_port = 5000

# Hyperparameters
if my_ip == "192.168.0.1":  
    BOOTSTRAP = 1  # hyperparameter to determine the bootstrap node
else:
    BOOTSTRAP = 0
N = 2  # hyperparameter / number of total nodes connected to nbc network


def generate_wallet():
    # poolsize is related to the # of CPU threads available
    pubkey, privkey = rsa.newkeys(1024, poolsize=2)
    return pubkey, privkey

def sign_transaction(trans, privkey):
    # hash and sign message in one operation
    signature = rsa.sign(trans, privkey, 'SHA-256')
    return signature

def verify_signature(trans, pubkey, signature):
    """
    Verifies the signature matches the transaction. 
    This is executed by the receiver.

    inputs:
    trans - signed transaction
    pubkey - public key of the sender
    signature - signature generated by sign_transaction

    outputs:
    True if valid, False if invalid
    """
    try:
        rsa.verify(trans, signature, pubkey)
        return True
    except rsa.VerificationError as e:
        print(e)
        return False

def validate_transaction(trans, pubkey, signature):
    if not verify_signature(trans, pubkey, signature):
        print("Transaction Verification Failed!")
    # TODO: check input/output for balance issues

def broadcast_transaction(trans):
    # TODO: nodes = list of all nodes
    success = []
    for node in nodes:
        # TODO: change the format if we are not going to use json
        req = requests.post(node, data=json.dumps(trans))
        if req.ok:
            success.append(node)
        else:
            # we can use req.raise_for_status() but it'll stop the execution
            print("Broadcasting failed.")
            for s in success:
                #TODO: handle the exception properly - broadcast cancellection msg
                req = requests.post(node+"/undo_trans")
            break


# Generating RSA key pair
pubkey, privkey = generate_wallet()
# Check if there is a node running on port 5000
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    if s.connect_ex((my_ip, 5000)) == 0:
        my_port = 5001

my_id = {'id': '0', 'ip': my_ip, 'port': my_port, 'e': f'{pubkey.e}', 'n': f'{pubkey.n}'}

# TODO add newcomer to nodes list as dict or not?
nodes = []
# Create genesis block and genesis transaction, only for node 0
if BOOTSTRAP:
    nodes = [my_id]
    genesis_transaction = Transaction(0, pubkey, 100 * N, None, [], None)
    genesis_block = Block(0, time(), (genesis_transaction), 0, -1)


@app.route("/join-network", methods=['POST'])
def join_network():
    if request.method == 'POST':
        rec = json.loads(request.json)
        ip = rec['ip']
        port = rec['port']
        e = rec['e']
        n = rec['n']
        print(f'Connection from: {ip}:{port}')
        c_id = len(nodes)
        nodes.append({'id': c_id, 'ip': ip, 'port': port, 'e': e, 'n': n})
        print(f'Added node: {c_id}: {ip}:{port} to network')

        return json.dumps({'cni': f'{c_id}'})


def send_nodes_to_all(nodes):
    while True:
        if len(nodes) == N:
            for node in nodes[1:]:
                requests.post(f"http://{node['ip']}:{node['port']}/get-nodes", json=json.dumps(nodes))
            break
        else:
            sleep(5)

@app.route("/get-nodes", methods=['POST'])
def get_nodes():
    if request.method == 'POST':
        nodes = json.loads(request.json)
        return '1'

if __name__ == '__main__':
    if not BOOTSTRAP:
        # Node makes join request and joins the network
        # If it fails it retries in 5 seconds until the 
        # bootstrap server is up and running
        while True:
            try:
                x = requests.post('http://192.168.0.1:5000/join-network', json=json.dumps(my_id)).json()
                my_id['id'] = x['cni']
                break
            except requests.exceptions.ConnectionError:
                print('Server unreachable retrying in 5s...')
                sleep(5)
                continue
    else:
        # The bootstrap server starts a thread which waits for all nodes to 
        # connect and then sends each server's credentials to all of them
        Timer(5, send_nodes_to_all, [nodes]).start()
    app.run(host=my_ip, port=my_id['port'], debug=False)
